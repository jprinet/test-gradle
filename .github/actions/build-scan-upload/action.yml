name: "Gradle Enterprise Build Scan Upload"
description: 'Upload Gradle Enterprise build scan'

inputs:
  build-tool:
    description: 'Build tool [gradle|maven]'
    default: 'gradle'
  token:
    description: "GitHub token"
    required: false
  ge-access-key:
    description: "GE access key"
    required: false
  tos-workflow-name:
    description: "Name of the Github Workflow checking TOS Approval"
    required: false
    default: "GE-TOS"

runs:
  using: "composite"
  steps:
    - name: Download Build Metadata
      uses: dawidd6/action-download-artifact@v2
      with:
        run_id: ${{ github.event.workflow_run.id }}
    - name: Init environment
      # Required as $HOME is not expanded in a classical env section
      id: init-env
      run: |
        if [[ "${{ inputs.build-tool }}" == "gradle" ]]
        then
            BUILD_TOOL_HOME=".gradle"
        else
            BUILD_TOOL_HOME=".m2/.gradle-enterprise"
        fi
        BUILD_METADATA_DIR="build-metadata-${{ inputs.build-tool }}-*"
        BUILD_SCAN_DATA_DIR="$HOME/$BUILD_TOOL_HOME/build-scan-data"
        
        source $BUILD_METADATA_DIR/build.properties
        echo "sha=$(echo ${BUILD_SHA})" >> $GITHUB_OUTPUT
        echo "pr=$(echo ${BUILD_PR})" >> $GITHUB_OUTPUT
        
        echo "BUILD_SCAN_DATA_DIR=$BUILD_SCAN_DATA_DIR" >> $GITHUB_ENV
        echo "BUILD_METADATA_DIR=$BUILD_METADATA_DIR" >> $GITHUB_ENV
        
        mkdir -p $BUILD_SCAN_DATA_DIR
      shell: bash
    - name: Restore Build Metadata
      run: |
        # cp --backup=numbered allows to avoid error with duplicates "cp: will not overwrite just-created <filename> with <sameFilename>"
        cp -r --backup=numbered $BUILD_METADATA_DIR/* $BUILD_SCAN_DATA_DIR
      shell: bash
    - name: Wait for approval of Gradle Enterprise TOS
      uses: actions/github-script@v6
      id: check-tos
      env:
        sha: ${{ steps.init-env.outputs.sha }}
        pr: ${{ steps.init-env.outputs.pr }}
      with:
        github-token: ${{inputs.token}}
        result-encoding: string
        script: |
          const delay = ms => new Promise(resolve => setTimeout(resolve, ms));
          
          // Run several checks to allow delayed approval
          for(let i = 1; i < 5; i++, await delay(15000)) {
            console.log('Attempt ' + i);
            // returns most recent check runs first by default
            const checkRuns = await github.paginate('GET /repos/${{ github.repository }}/commits/{ref}/check-runs', {
              ref: process.env.sha,
              per_page: 50
            });
            for await (const cr of checkRuns) {
              // check only last execution of the TOS workflow
              if(cr.name == '${{ inputs.tos-workflow-name }}') {
                console.log('Found execution of ${{ inputs.tos-workflow-name }} at ' + cr.completed_at);
                if(cr.conclusion == 'success') {
                  return;
                } else {
                  throw new Error('Found failed execution of ${{ inputs.tos-workflow-name }} at ' + cr.completed_at);
                }
              }
            }
          }
          throw new Error('No execution found for ${{ inputs.tos-workflow-name }}');
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
    - name: Set up Gradle
      uses: gradle/gradle-build-action@v2
      if: inputs.build-tool == 'gradle'
    - name: Publish build scan
      id: publish
      run: |
        # Do not fail the step in case of error as (gradlew buildScanPublishPrevious || true) does not work
        set +e
        
        scanlinks=""
        nbScans=$(find $BUILD_SCAN_DATA_DIR/*/previous/* -type d | wc -l)
        
        for ((i=1; i <= $nbScans; i++))
        do
          echo "BUILD SCAN PUBLICATION $i/$nbScans"
          if [[ "${{ inputs.build-tool }}" == "gradle" ]]
          then
              ./gradlew buildScanPublishPrevious | tee build.out
          else
              mvn gradle-enterprise:build-scan-publish-previous | tee build.out
          fi
        
          scanLink=$(grep -A1 "Publishing build scan..." build.out  | tail -n 1  | sed 's/\[INFO\] //')
          if [[ ! -z "$scanLink" ]]
          then
            echo "Found scan link $scanLink"
            scanlinks="${scanlinks}<br>[Gradle Enterprise Build ScanÂ® $i]($scanLink)"
          fi
        done
        echo "scanlinks=$scanlinks" >> $GITHUB_OUTPUT
      env:
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ inputs.ge-access-key }}
      shell: bash
    - name: Comment PR
      uses: actions/github-script@v6
      env:
        pr: ${{ steps.init-env.outputs.pr }}
        scanlinks: ${{ steps.publish.outputs.scanlinks }}
      with:
        script: |
          const prNumber = Number(process.env.pr);
          const message = process.env.scanlinks;
          
          if(message.length > 0) {
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
          }

